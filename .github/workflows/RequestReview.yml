name: Request review

on:
  pull_request:
    types: ["review_requested"]

jobs:
    assign_and_move:
        runs-on: ubuntu-latest

        steps:
            # https://github.com/actions/github-script
            - uses: actions/github-script@v3
              with:
                    github-token: ${{secrets.GITHUB_TOKEN}}
                    script: |
                        const toDoColumn = 11144556;
                        const inProgressColumn = 11144557;
                        const reviewInProgressColumn = 11144558;
                        const reviewApprovedColumn = 11144559;
                        const doneColumn = 11144560;
                        //
                        async function getIssue(issue_number) {
                            try {
                                return (await github.issues.get({
                                    owner: context.repo.owner,
                                    repo: context.repo.repo,
                                    issue_number
                                })).data;
                            }
                            catch{
                                console.log("Issue not found: #" + issue_number);
                                return null;
                            }
                        }
                        //
                        async function findCard(content_url) {
                            // Columns are searched from the most probable one
                            const allColumns = [reviewInProgressColumn, reviewApprovedColumn, inProgressColumn, toDoColumn, doneColumn];
                            for (let i = 0; i < allColumns.length; i++) {
                                let cards = await github.projects.listCards({ column_id: allColumns[i] });
                                let card = cards.data.find(x => x.content_url == content_url);
                                if (card) {
                                    return card;
                                }
                            }
                            console.log("Card not found for: " + content_url);
                            return null;
                        }
                        //
                        async function processIssue(issue) {
                            const oldAssignees = issue.assignees.map(x => x.login);
                            if (oldAssignees.length) {
                                console.log("Removing assignees: " + oldAssignees.join(", "));
                                github.issues.removeAssignees({
                                    owner: context.repo.owner,
                                    repo: context.repo.repo,
                                    issue_number: issue.number,
                                    assignees: oldAssignees
                                });
                            }
                            console.log("Assigning to: " + context.payload.requested_reviewer.login);
                            github.issues.addAssignees({
                                owner: context.repo.owner,
                                repo: context.repo.repo,
                                issue_number: issue.number,
                                assignees: [context.payload.requested_reviewer.login]
                            });
                            const card = await findCard(issue.url);
                            if (card) {
                                console.log("Moving card");
                                github.projects.moveCard({ card_id: card.id, position: "bottom", column_id: reviewInProgressColumn });
                            } else if (issue.pull_request) {
                                console.log("Creating PR card");
                                github.projects.createCard({ column_id: reviewInProgressColumn, content_id: context.payload.pull_request.id, content_type: "PullRequest" });
                            } else {
                                console.log("Creating Issue card");
                                github.projects.createCard({ column_id: reviewInProgressColumn, content_id: issue.id, content_type: "Issue" });
                            }
                        }
                        //
                        let processPR = true;
                        const matches = context.payload.pull_request.body.match(/Fixes\s*#\d+/gi);
                        if (matches) {
                            for (var i = 0; i < matches.length; i++) {
                                console.log("Processing linked issue: " + matches[i]);
                                let linkedIssue = await getIssue(matches[i].split("#")[1]);
                                if (linkedIssue) {
                                    processPR = false;
                                    processIssue(linkedIssue);
                                }
                            }
                        }
                        if (processPR) {
                            console.log("Processing PR: #" + context.payload.number);
                            const issue = await getIssue(context.payload.number);
                            if (issue) {
                                processIssue(issue);
                            }
                        }
                        console.log("Done");


#https://api.github.com/repos/pavel-mikula-sonarsource/GitHubActionPlayground/issues/1

#jobs:
#    assign_to_self:
#        runs-on: ubuntu-latest
#        if: |
#            github.event.changes.column_id.from == 11144556
#            && github.event.project_card.column_id == 11144557
#            && github.event.project_card.content_url != null
#        steps:
#          # https://github.com/actions/github-script
#          - uses: actions/github-script@v3
#            with:
#                github-token: ${{secrets.GITHUB_TOKEN}}
#                script: |
#                    var issue = await github.request(context.payload.project_card.content_url);
#                    console.log(`issue ${issue}`);
#                    console.log(`issue ${JSON.stringify(issue, undefined, 2)}}`);
#                    console.log(`issue.data.number ${issue.data.number}`);
#                    if(!issue.data.assignee){
#                        github.issues.addAssignees({ owner: context.repo.owner, repo: context.repo.repo, issue_number: issue.data.number, assignees: [context.payload.sender.login] });
#                    }
#                    console.log(`The event payload: ${JSON.stringify(context.payload, undefined, 2)}`);


