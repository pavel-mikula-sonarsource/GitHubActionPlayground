# This is a basic workflow to help you get started with Actions

name: Request review

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  pull_request:
    types: ["review_requested"]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "assign_self"
  say_hello:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      #- uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!


#https://api.github.com/repos/pavel-mikula-sonarsource/GitHubActionPlayground/issues/1

#jobs:
#    assign_to_self:
#        runs-on: ubuntu-latest
#        if: |
#            github.event.changes.column_id.from == 11144556
#            && github.event.project_card.column_id == 11144557
#            && github.event.project_card.content_url != null
#        steps:
#          # https://github.com/actions/github-script
#          - uses: actions/github-script@v3
#            with:
#                github-token: ${{secrets.GITHUB_TOKEN}}
#                script: |
#                    var issue = await github.request(context.payload.project_card.content_url);
#                    console.log(`issue ${issue}`);
#                    console.log(`issue ${JSON.stringify(issue, undefined, 2)}}`);
#                    console.log(`issue.data.number ${issue.data.number}`);
#                    if(!issue.data.assignee){
#                        github.issues.addAssignees({ owner: context.repo.owner, repo: context.repo.repo, issue_number: issue.data.number, assignees: [context.payload.sender.login] });
#                    }
#                    console.log(`The event payload: ${JSON.stringify(context.payload, undefined, 2)}`);


